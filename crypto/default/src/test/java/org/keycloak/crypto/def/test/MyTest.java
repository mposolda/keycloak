/*
 * Copyright 2023 Red Hat, Inc. and/or its affiliates
 *  and other contributors as indicated by the @author tags.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package org.keycloak.crypto.def.test;

import java.io.ByteArrayInputStream;
import java.security.KeyStore;
import java.security.Security;

import org.junit.ClassRule;
import org.junit.Test;
import org.keycloak.common.crypto.CryptoIntegration;
import org.keycloak.common.crypto.CryptoProvider;
import org.keycloak.common.util.Base64Url;
import org.keycloak.rule.CryptoInitRule;

/**
 * @author <a href="mailto:mposolda@redhat.com">Marek Posolda</a>
 */
public class MyTest {

//    @ClassRule
//    public static CryptoInitRule cryptoInitRule = new CryptoInitRule();

    @Test
    public void myTest() throws Exception {
        //Security.setProperty("keystore.type.compat", "false");
        CryptoIntegration.init(CryptoProvider.class.getClassLoader());

        // PKCS12 keystore returned by ClientAttributeCertificateResource.generateAndGetKeystore on the FIPS enabled host with the OpenJDK FIPS providers (no BCFIPS provider involved)
        //String keystoreEncoded = "MIIMwgIBAzCCDGwGCSqGSIb3DQEHAaCCDF0EggxZMIIMVTCCBawGCSqGSIb3DQEHAaCCBZ0EggWZMIIFlTCCBZEGCyqGSIb3DQEMCgECoIIFQDCCBTwwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFINqqo67jlqyIVVQSBf-E_FBjHOcAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQPyfyRb8HyjA3Rfb0iU1MaASCBNC0JGKYJlFYPwsh9dRjBrs-vBXuXv4aJmOUF5mvCaFXj6fs_BtMBtTYy6rpg-7OjXG_8FaxRSHoLxqamFfPbeepDM25RSHPOAR28qFXtCDyHAzfzmwGy1T6NstUi-vcFeGXZlArXdwa6IcP9Jq4WmbZOSaf_20CBKmo0tnUj_ktxS7yS2soUOM0psb09bxvyy_EZGns6h0v1Lyd7pmQ8ScNdtWWE8NOujWxrm2AeuwrZJj7fbCqpfVnvHW9VSTM7kJMBs3QVMih_3rILipQ1GBdQ-1ISMv1KBuMc3FP1ysfKmyHvoDvu2H5wOH_SRn2wGq1eoZAkAL_Sito0aF1iUFrBKD6KCXWqP40vPVrn15asRxbfvygQXF1EqVXpenMmQ6Mqnd-6CTVvOP8FGZx9DHlcMjKEbz_y31x-l6Py3D_9Zot8-vYc9WGuVceHb7kN6tfSl3_weQ-5fVcCtRIBNQIt9B2M96GT3A1o74zwbYCIFaQzRPM9XTI_d1gHwBkBuGDYUI7IIjTwb9R6ux8nEP1-C5Edjg6clRF6TBlCtqqpouzONq-ZdIOlO-Fh-eRXHrC0NQGEgwQoCPlN5LxYhw0-ov-JLeaJwSVKudhHfCMkX-mg-f8-B7aB6P1Zk_xc3Kt01CFFhhy8rioniwGGfewXudg2UNQc1_ARMhvQTIvnpfUOiwj9xjcKtC4j37pud9ytN6VsLMOFHyXKYedOu_y98ypskN3zbZGvcUgLhUeujtVy-FGZE8XSao_KRFGFRGs16FGS9j2nuAb_pA4lmVHxA-AfUT9dvQjfAiA4lbWYEYGyYlWgv2TfCDBtqI12Z-5zGwlURfh4MZ5piLFzpqNNRYrok5kV4aN6YCFDARh1nli20-AR87O69lDg0LQikcbNf4kcXt4ssY1LhJiXQW-5goDP6f2jT0HmGvUD4uPqmwrrvlxL8krzoJrOq-J0Wht3e2dIg7-f-uM4Vrj3a5PUEdZ-Rrm0_j72LVHmh_uKa2YVWQMoOYph31tIrt5CFXdiZqOohhB9IReSBqfFTvlRLZ7ZXZZUgOwXRA8cxH9njGDXrV_v5ahcN6bG7Ia9Fm1nlw7aLFzaDFf9Fd2qFV3dfMHT_a959RmUYYLe5W0fL1xGnH2p8LHPMzshAvteWnCKPS-O5WKH-e0SvZmJQGnB-O4Waa0kPjb8k2ocmzvseXEX-V6tlwIg8x9RQB59wIDqFO5YRVfVtt12DixMNoKsrxD6qFBGGno-2lTygVtG3Ly6VreDJmtlxwJdnQyn3CIMjDv6ZXNuBUvkaybW0dAciFHjSBCUdKoShfE5zqDuetK717bzH1REmbCI3dxBB2nD28jiRzPaJiPo_Yq0IVp78np2cdd-4OXrbIaUA7vMFF7CqmJLhSmxW1MasAD8ecM-XZrAPVvCdCWajVuTX3yaU2vCIodiDv3eyrsuZjqUYQgOFMND8oEG9GlFSzZ0EjfiXdQ9BsUMN1h5y1USA7crV1VOaAMEJ0gi-H38n_-OrAs4touD1CG3OpcQXX1xlq2hOlqsLHh4rZXswJjYY_U4lZ2e9pJJGJtOYOXZKF0il8_BH7IaEqGwNL4lbqSUIUUVKvR_L2YBeoRIvyrwKLvtI1ImZNOqhEm5crzLPTCbDE-MBkGCSqGSIb3DQEJFDEMHgoAYQBsAGkAYQBzMCEGCSqGSIb3DQEJFTEUBBJUaW1lIDE2ODYxMjM2MDUwNzMwggahBgkqhkiG9w0BBwagggaSMIIGjgIBADCCBocGCSqGSIb3DQEHATBmBgkqhkiG9w0BBQ0wWTA4BgkqhkiG9w0BBQwwKwQUSqWcyeYcd_JSbdShVR2czClR3YsCAicQAgEgMAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBCJdYBLUHivlf_tmqvre7NGgIIGEOKcpCnuKHJqSQ6RbFzm4SYhFM7OEdrkkw0vw-z8pPdNrBA1znDT8kKxU0L_xsKq6iV7B4oGNRoIoNHRGJ9KXISW5nKPZhUwPVqHTGo5Un9g6cy4qDV4V6f2UVrgiwFoObkB9_khYzRnavi2V-_iIKtNuv4IAuRz2ARqbkSoEnnz3O6Wvajvot8lP0aInMGzoKY4hDM6YGD_9F8susGbgeafjRWohhB0MfJs4SPLqajKrO1irdvR5B_uzXP1jqaVDnQ9ZfdBqJFcu73458HkS1eW04pjOEpQeuBPGNfUZzeBdxvJ9PnfkfWrBsrZkaObZD8h_Tr3ZeTabwC5AF4IVjPeMn9aOhGb985l1HPPpBPAWvMvVZWuFK0L5fAmgFUFfpHGJ7IY6RO6B1MV4lNZ0z4Qk4i-yUWMhwj2l1EBqIDFi5ZelWF0EK7bkT8VKSCKlNeLi89lM-jmTVJQuFDS8YDO8FTpmoKfWW4uz2yYngFIMVItTHUlOXzeOU2Vzpb5S_Mx5I-7CDN8c2dNQ4RzNJty_p8d02ojC9Q4mLP81tiXtOJ2x3WfJodZQT8pki-kN2TAMT7UvQ1ufAplu6R-3a0NToYFu3lWKetG38u3kdY3nxsw05n5Z7uRuXhuX-Q58bbNquCytGdV9XaBvaR8PoHKm-f9w1l_9z6W38MAtiJXRc4UwxiVBU2SRjSabAZKso8BOwmOA3Lj64L6QtNR9WkwC6Nm6qSFqdw8jFbd3iVyf9x7hsGl6hZU9INGNYSPAMSBRJ0T5sgMO1NG3jOXSrxqNdOSaB0PXWt6twnD8g63xz3gZTfXZ7t7COGZJXE4PnJxEWFuk65QL7DqO9HfPLt0sWLr8awAk7g69knh8fLLFn4nkvznMHAYicojr5SVsBuwvAB0DhbskQKgFAlzNp8esiZDcRomFEr8PiV5pClIK3xL0VCa1mQiw_xJYxFEML534w9Jau3YzoaGeoNOkeybmK0PDtVFKhaL0-CWHTVOsieBniCLgJEvki-BxbY4zcqnv3YGKae4ESHAJWS_xLA2Zbqn1bKw6XHAtHMYihFB9Af1LpVjwSf2RIUURC6ajR88MzAET6eJmFJg33TyuQI4x_gqsp0GlCY_4r8G_XKPWq1wpNrwK_ul4FlGeEavRa_81jIrOpDOEI-DKgL27g5Mc3fNiIBUQBs_WOVbbzsYhKP7n4-8KJsItzuzdlD5Za7x7bQlo_j5q-Jd0E9Mol1XED6vWhPv_MMZrvpHmbv2EtJlGYjXy2J-id01GALn-hYXroAUz4zirdW09fe_fyxd27WFRRGkFp8v_bbkOu_n9ZJ8WXN-yr11oHYptJZRYlYTBHgOGXjIWj4JZ8lK3lTVEaeu0jJd0a-icNtDjvb_UIXSYPOhWlOoQ2-pkExUn8BuRrGVakdUJnnt1PkUbxVMpao49fbQWFHJOc6i8QRwGuQYJKTRS3dAutjfanXt3Jm0cV4DpWzbdO4w__ixhQBsvYS1zAqIsSxO6gr-8sR2r3umIJBa-ESb3WVsVJYn2Ns90t361nW_-ccJgZJ7DSqCE0X8TR_1xAs-tM0dN9s9G63l2y4-M2x9hQWWsxV5E95t892BoVvlpQi3a3OYTQFiJFeRg9Q-g8n5BzX_zo3Rwcjac7oVMinteFocbmRs67v1JaO6X85cZHcX8zRQQBV8JDSLLQDmXq0nWjBUVrMRZ_tYqtMpdGJwvYfZYfkFja_8jwQOvAE3ej7nec6A_EweWvQ3B01y89ju8V7pbgC6TFhQpwr1RdOgYyCuJ_sL6UNTYzzKOpDsG-zmkWf91-t9tZ7vqpVuqf7MDuHEsb63kKe9qPpCajTPGdv0IGPSq7PEwInJOp7iJjFuMFzfeRUb6AChrgOkm0wv2EVzi2zsEmXfb_IIaX7y6NuxmVSR6Yn7CKhdlzgD0WwFPFUuZ8zvC6P_cCtyjG6Lb1EPRRPbB5Cbnf82_Gz45ZdllFNxvawQlwQA13HX6SjsqDw5TD2U_zOdzqW1QbCRtkidsABhIJAkV15c9CvrSe_dCUifIU1ZouXjVFCUGbJd_wgO3JcwTTAxMA0GCWCGSAFlAwQCAQUABCAF5ogOF3J9_ir-JWbYBHDaCKEFSZ8x_TZAUI89UX-p6gQUPc2OJgVvIxL8Lt3n7FeHN-qRQnsCAicQ";

        // PKCS12 keystore returned with the OpenJDK providers (no FIPS environment, no BCFIPS provider involved)
        String keystoreEncoded = "MIIMwgIBAzCCDGwGCSqGSIb3DQEHAaCCDF0EggxZMIIMVTCCBawGCSqGSIb3DQEHAaCCBZ0EggWZMIIFlTCCBZEGCyqGSIb3DQEMCgECoIIFQDCCBTwwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFO5L9toCyBCe1kADh-KTOCQrzptaAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQRX3ubI7eiogM-pdJ1HPhswSCBNCs462poixyLjUI70mGEfJ_yGqB7Egl1RLJ2Yi9QgflWQHTO1DAu-Uq1mtaitknDSvFcOfefSSbvxW-jfX6i-ExZr-bmpVltriBgk978qC5_rlZ4xRgsI_OESk8DQsHdpedLyH-XMMlqjfdwt_P39nbwLWOr4qoMmbNIBklJs9iKbeILzUQulwTKzdk0_TZGVnWonm1QfzEQc1iF9OTbloKApoklqhzKb03IRYCh1hilAu82OywOOE66SzX32jtYUFam0I9YzOkxCvjH_QPAfFuaxLKByY7SQXghfCpJZ0qkv6-CLeyIq4LmQcGN9idHCE-Hdx6awAQ4YQAhkZQanROg-QtmoXIECImB882is28AIaHmbgdWdGZzE5Prw_G_Ed7CB9ReIXtbzjvX7DmZr9AZAz-o8Wj9pmgl8u_yEVGHsAzkg-fG-T9lQcfN7VDqpvQUWTbbFsriCVJIddeXrA7Z4uvk8lcZYXN7pvp66gO6oU8jhajTFRP0Vj3W4xnnxMQpUpv4LEWe5lrbU3NiMWtHVaKN1PJmCXS7fzod8qAK3hanDN36H3H9tBAjthE84gjke8wmXRpFU6BTT9DICgORoXSSMMy2Jz84eOauVNku0q_s4rB1JR7a4IR7igF-EIOK7RGdoVLk3izmfHg4GIkqDX5zC_m3mSoRcn-W_xeWm8BR7gt7Ig6voVWpdd07hj9GFN1Q_1KY39nt0piXRzsLWpOhpQFWZIyPlVakNKz-hMoo-iGNZvn1vUrieYA84dVbWiAcpuAOTwUHGCqNm01jRpv2eNbS6_WqtFjKySTjotmry13HNdN-Vr3X769oQCQr5p8QoTQg-bzjuFCjF-UnvHe3kz24zoCI3XL2Be2t5Q659yXQRdeBnw6v_FgoabisNsRFPJ1OH6KE_j4idRJzH-Hd59gbLAdoJMiiX-XXo9CYN9_Hq-qk4mbDhkJdMsmA4uQV6Xz-RXsm4WlOvUSFo8VvkMQoxt4OGCWiJqNJiGlY6SoRS-cuUWbHcxRTmeD6HHI3BrvJ1D_J45zar9zOZ_VPqoalaflAX2YKsHCncKQcYKMFsjMR4G27hX4MjCNemTLd9PJvOedXl49kKks9NouuTglzXfnil1w5ROy4ZNuzp2SukaduC6T6rKVICT-oioy9DIocjyR0f7t_2F9_bxD-lN8O2Th2nR0Vp2z95mRDMbKf3Vyg4EsD5IwbY2fZK6cXwgjHqYqeScWs9BWz-eYs1VcsZTyWpE9kLykVHdIRH7sJdL9xCjvC_j84WAOGiFYlLaC-0I84BqyahPRlxwAiivVqENew5cNDIynIDa8yzqR-qNQ3MpTT-nfNucpjEcIlKky2kZ1lxD5wew4UAS4hhml3cNWsvN5CkGvdf66uY25jueYbhR49yOHSdg8HK4Ue2S-fSgzoGbEO7kOLCM2YRtEHalJv1eFYyLEq13-V4bXCORmS07wpMuE4Fc8RMv4Ih6hPylWQAuV1ZvXUP-ZlMySmpgkQ4eUXSMgQ2gWXy6D7ab1dGfIsHsw15xHkVfOVIaDuPSVW2WwueAa6IQejTspBU_vVkaB7YxIcZTVGFm_3gk3NJDGDQWvTqw_JDwV8EVOoQ9Mv0MPg9dQ1m886AkAyC9Y_QMOUYtWDjE-MBkGCSqGSIb3DQEJFDEMHgoAYQBsAGkAYQBzMCEGCSqGSIb3DQEJFTEUBBJUaW1lIDE2ODYxMjgzMjEwMTcwggahBgkqhkiG9w0BBwagggaSMIIGjgIBADCCBocGCSqGSIb3DQEHATBmBgkqhkiG9w0BBQ0wWTA4BgkqhkiG9w0BBQwwKwQUQOK0dZXW9r-QLN3MTGjQ_EKONUsCAicQAgEgMAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBCIKK1UbUZsXimyfdV2vTW_gIIGEF1LSR9AbsGcLeowIPrr3j_CSwZBUyncoIINyYonoMCKkT2dIzv1z5ouNirDiMjqQGIMQ6j8pMnTjuhDiGSs-6xWrzwVipVZZtxSCJyfKlkKkjzaJBmUcb92BJmsBhre3uVriueS9KVi6p5uGIIAht_N5eR8ZsNQ7IkvHCK0ESBuVMh8SeoMeRQlnNg83RnbstugdDjRe4H-g8RYgxMBksuihSbR53_xUllpYTdiUODeK_dUfFh2qYkqGmIqnoxuL_nTQ2-YepxykNSZp_vmDbpEEZiqygrgyA2TgVroJg5W7CL8jzXQsAyPQFUJIWClzw1p7mMfSteHGdWiK1qwa0uZ5Glj7_Xay02WulEXtvyTBnER7g85aP2CjDknXginA6ybSOYIh2EfT04wM0ama5o1Ggj8ukPpwYYGWhQxEF4tsid2FdksJxbutRpr98uubuk3oS8SMsysCi6TsFiGpgw18TgtwaqQ34-eLJvZu0unGvFDJTDf3SVhk8sKo6kXhNnMIeGLav0vemUbAEz_vbkxE7doU9G_rhUph0ashCy2p4-tk8B2-fklockt7WjGt2RllrE98ktunGtUOdk87XgOE0rj8QAp0Ju0qn3HHM2vJE8MiohMZ74NgkNUa6tMY5Uwqa1kwa69ywMRMhgttYkPyitjRR4uH048-fgcRagnYxV9abB5tzo3xf6Z3BQDk7dzk5NzFdXlgkQxgqfU8wgTyZP0Lekc1iLXRTCbBsV2daAUAQZ6GPZy-td53VJ241V2IXoaRb_2E_7YrJM_p2Kxl8QfUjapzoTg6_SEKWvjKCGX6Jyh-_6MmOFzoyfDtLc8OJXx7rX5H1QLwW-okHs3dCe9euGP-7FGp9oOhOOvcop8bPhm9TOJVcLKGdTFPjyqUVmDBwUhKbpI6yOgNetWTX6c_CxuJ_euimc3q-rnAuiqEdxodV07XYUezGNSSMPcff6E2tPvoiQRgnd1hBrRyInxbQDnNjfodgGtDq31nZCqxXA7_ZB4g0RT4KZyP7gTBRZ6QkEtXOG1Nk_UBOjchvOVCoNLoGBnHCHTUA7gDdjo4ZNBbN06B_eSUutCFFCEzcKHR58ac-4Z9TWO-myIbalzdJZvHrLnvMC6gVcylTL_lzM3ogg_y66wWwqBlpHYRTUMzPdYLpV5IBPg2DOS-TrzcSlrD7E4jYEnFyq5x84V5WSADQ3srqWcHpDUsz0ohQyURCgQJcgA3bc59mLFZ_7lwLrF3jg_1zqJsu1Q988AfKZ88rAK7pvdirhpUrlQT6TMpfyCdBVTcUWBbdZIGaOPGIYq3yU_NqIvNjqVxpT8S7Zya4zTc8iO4ofiy9IX36bLcv_c4cBd8Xe8n4slaRs81Os7ac02mPvQHRg_5jtZh2XdTzeHWb-z-xCyjEEr3oKwS_zMaqHWLhjZJycYcWAwUzA-Iw6JU-3EQAJE2u0qIjJVelvUe_se_ysVOPZS-DZpnMrjs-bnXYxYdaJexdQG4At_RooKWN6ZS_LOFQDXjZDglZ2xA3YcvftvXMPm3ChO9zVU7Ic72sGuJGUMsCQLjnyrh7khLUlktkVEtugaL8a99XpS3unr7KmoYz5qNv-UL10Vrx6TjCnXqck9FOvUwk6m1417ORWsL4urCBxbKLUSwfRzZ9TpAh8M_qGX5EFKm_06n9yv2zw27J1jcbtED55-z95d-nIP_fJWp6vNtRlDrudc9huVbhxT7nx-ygd1VCBob7sFBR9C0BweZbU-gBNQF0VExGW3iJdejeVu8X2rsb5zyyyfyykdxTRxkTOq0tLqRsB8cvnRsX4cR0A10wDqBZHhsHTRAF1nT_8JP91PsI2qOo8d1pziGVX5jptASKyBDQd8wZ07eHQaPZXHYsfIJ-WtYRgGzv6KQOZo0_E35-xuxbMUGD-bbWBr0eO-IwA2TV19sMnrfmIbEhLYvufAdjmrpFKIHSxfZT3E7YVAGLhJEP3FrIPwV-_iVbwwanDM4FWyCYKkpr96Th75p35xbz_jOmUOtxI-scA6YPp5VUfrQ_0zCiRWXDOcz04GAlirYX8mVsOikCIwTTAxMA0GCWCGSAFlAwQCAQUABCDc3WB4uE-4shhLgdHNfUms2pYxGSJAvtsdgtsn3rXIxgQUXS3_FG4djr9uueYFi3-aYMGB1D8CAicQ";

        byte[] bytes = Base64Url.decode(keystoreEncoded);

        // This doesn't work - Bouncycastle provider cannot read PKCS12 keystore created by Sun providers
        KeyStore keyStore = KeyStore.getInstance("PKCS12", "BC");

        // This works (doesn't use BC, but default Java providers)
        //KeyStore keyStore = KeyStore.getInstance("PKCS12");

        keyStore.load(new ByteArrayInputStream(bytes), "storePass".toCharArray());
    }
}
