{"version":3,"file":"ScopeDetails-C5Ma6EZg.js","sources":["../src/clients/authorization/ScopeDetails.tsx"],"sourcesContent":["import type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { useParams } from \"../../utils/useParams\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toAuthorizationTab } from \"../routes/AuthenticationTab\";\nimport type { ScopeDetailsParams } from \"../routes/Scope\";\nimport { DeleteScopeDialog } from \"./DeleteScopeDialog\";\n\ntype FormFields = Omit<ScopeRepresentation, \"resources\">;\n\nexport default function ScopeDetails() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { id, scopeId, realm } = useParams<ScopeDetailsParams>();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const [deleteDialog, toggleDeleteDialog] = useToggle();\n  const [scope, setScope] = useState<ScopeRepresentation>();\n  const form = useForm<FormFields>({\n    mode: \"onChange\",\n  });\n  const { reset, handleSubmit } = form;\n\n  useFetch(\n    async () => {\n      if (scopeId) {\n        const scope = await adminClient.clients.getAuthorizationScope({\n          id,\n          scopeId,\n        });\n        if (!scope) {\n          throw new Error(t(\"notFound\"));\n        }\n        return scope;\n      }\n    },\n    (scope) => {\n      setScope(scope);\n      reset({ ...scope });\n    },\n    [],\n  );\n\n  const onSubmit = async (scope: ScopeRepresentation) => {\n    try {\n      if (scopeId) {\n        await adminClient.clients.updateAuthorizationScope(\n          { id, scopeId },\n          scope,\n        );\n        setScope(scope);\n      } else {\n        await adminClient.clients.createAuthorizationScope(\n          { id },\n          {\n            name: scope.name!,\n            displayName: scope.displayName,\n            iconUri: scope.iconUri,\n          },\n        );\n        navigate(toAuthorizationTab({ realm, clientId: id, tab: \"scopes\" }));\n      }\n      addAlert(\n        t((scopeId ? \"update\" : \"create\") + \"ScopeSuccess\"),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\"scopeSaveError\", error);\n    }\n  };\n\n  return (\n    <>\n      <DeleteScopeDialog\n        clientId={id}\n        open={deleteDialog}\n        toggleDialog={toggleDeleteDialog}\n        selectedScope={scope}\n        refresh={() =>\n          navigate(toAuthorizationTab({ realm, clientId: id, tab: \"scopes\" }))\n        }\n      />\n      <ViewHeader\n        titleKey={scopeId ? scope?.name! : t(\"createAuthorizationScope\")}\n        dropdownItems={\n          scopeId\n            ? [\n                <DropdownItem\n                  key=\"delete\"\n                  data-testid=\"delete-resource\"\n                  onClick={() => toggleDeleteDialog()}\n                >\n                  {t(\"delete\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n      />\n      <PageSection variant=\"light\">\n        <FormProvider {...form}>\n          <FormAccess\n            isHorizontal\n            role=\"manage-authorization\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <TextControl\n              name=\"name\"\n              label={t(\"name\")}\n              labelIcon={t(\"scopeNameHelp\")}\n              rules={{ required: t(\"required\") }}\n            />\n            <TextControl\n              name=\"displayName\"\n              label={t(\"displayName\")}\n              labelIcon={t(\"scopeDisplayNameHelp\")}\n            />\n            <TextControl\n              name=\"iconUri\"\n              label={t(\"iconUri\")}\n              labelIcon={t(\"iconUriHelp\")}\n            />\n            <ActionGroup>\n              <div className=\"pf-v5-u-mt-md\">\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  data-testid=\"save\"\n                >\n                  {t(\"save\")}\n                </Button>\n\n                {!scope ? (\n                  <Button\n                    variant=\"link\"\n                    data-testid=\"cancel\"\n                    component={(props) => (\n                      <Link\n                        {...props}\n                        to={toAuthorizationTab({\n                          realm,\n                          clientId: id,\n                          tab: \"scopes\",\n                        })}\n                      ></Link>\n                    )}\n                  >\n                    {t(\"cancel\")}\n                  </Button>\n                ) : (\n                  <Button\n                    variant=\"link\"\n                    data-testid=\"revert\"\n                    onClick={() => reset({ ...scope })}\n                  >\n                    {t(\"revert\")}\n                  </Button>\n                )}\n              </div>\n            </ActionGroup>\n          </FormAccess>\n        </FormProvider>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["ScopeDetails","adminClient","useAdminClient","t","useTranslation","id","scopeId","realm","useParams","navigate","useNavigate","addAlert","addError","useAlerts","deleteDialog","toggleDeleteDialog","useToggle","scope","setScope","useState","form","useForm","reset","handleSubmit","useFetch","onSubmit","toAuthorizationTab","AlertVariant","error","jsxs","Fragment","jsx","DeleteScopeDialog","ViewHeader","DropdownItem","PageSection","FormProvider","FormAccess","TextControl","ActionGroup","Button","ButtonVariant","props","Link"],"mappings":"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"}