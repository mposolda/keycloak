{"version":3,"file":"PermissionDetails-DsgxjrkW.js","sources":["../src/clients/authorization/ScopeSelect.tsx","../src/clients/authorization/PermissionDetails.tsx"],"sourcesContent":["import type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport { KeycloakSelect, SelectVariant } from \"@keycloak/keycloak-ui-shared\";\nimport { SelectOption } from \"@patternfly/react-core\";\nimport { useRef, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useFetch } from \"../../utils/useFetch\";\n\ntype ScopeSelectProps = {\n  clientId: string;\n  resourceId?: string;\n  preSelected?: string;\n};\n\nexport const ScopeSelect = ({\n  clientId,\n  resourceId,\n  preSelected,\n}: ScopeSelectProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const {\n    control,\n    getValues,\n    setValue,\n    formState: { errors },\n  } = useFormContext();\n\n  const [scopes, setScopes] = useState<ScopeRepresentation[]>([]);\n  const [selectedScopes, setSelectedScopes] = useState<ScopeRepresentation[]>(\n    [],\n  );\n  const [search, setSearch] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const firstUpdate = useRef(true);\n\n  const values: string[] | undefined = getValues(\"scopes\");\n\n  const toSelectOptions = (scopes: ScopeRepresentation[]) =>\n    scopes.map((scope) => (\n      <SelectOption key={scope.id} value={scope}>\n        {scope.name}\n      </SelectOption>\n    ));\n\n  useFetch(\n    async (): Promise<ScopeRepresentation[]> => {\n      if (!resourceId) {\n        return adminClient.clients.listAllScopes(\n          Object.assign(\n            { id: clientId, deep: false },\n            search === \"\" ? null : { name: search },\n          ),\n        );\n      }\n\n      if (resourceId && !firstUpdate.current) {\n        setValue(\"scopes\", []);\n      }\n\n      firstUpdate.current = false;\n      return adminClient.clients.listScopesByResource({\n        id: clientId,\n        resourceName: resourceId,\n      });\n    },\n    (scopes) => {\n      setScopes(scopes);\n      if (!search)\n        setSelectedScopes(\n          scopes.filter((s: ScopeRepresentation) => values?.includes(s.id!)),\n        );\n    },\n    [resourceId, search],\n  );\n\n  return (\n    <Controller\n      name=\"scopes\"\n      defaultValue={preSelected ? [preSelected] : []}\n      control={control}\n      rules={{ validate: (value) => value.length > 0 }}\n      render={({ field }) => (\n        <KeycloakSelect\n          toggleId=\"scopes\"\n          variant={SelectVariant.typeaheadMulti}\n          onToggle={(val) => setOpen(val)}\n          onFilter={(filter) => {\n            setSearch(filter);\n            return toSelectOptions(scopes);\n          }}\n          onClear={() => {\n            field.onChange([]);\n            setSearch(\"\");\n          }}\n          selections={selectedScopes.map((s) => s.name!)}\n          onSelect={(selectedValue) => {\n            const option =\n              typeof selectedValue === \"string\"\n                ? selectedScopes.find((s) => s.name === selectedValue)!\n                : (selectedValue as ScopeRepresentation);\n            const changedValue = selectedScopes.find((p) => p.id === option.id)\n              ? selectedScopes.filter((p) => p.id !== option.id)\n              : [...selectedScopes, option];\n\n            field.onChange(changedValue.map((s) => s.id));\n            setSelectedScopes(changedValue);\n            setSearch(\"\");\n          }}\n          isOpen={open}\n          aria-labelledby={t(\"scopes\")}\n          validated={errors.scopes ? \"error\" : \"default\"}\n          isDisabled={!!preSelected}\n          typeAheadAriaLabel={t(\"scopes\")}\n        >\n          {toSelectOptions(scopes)}\n        </KeycloakSelect>\n      )}\n    />\n  );\n};\n","import type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport { DecisionStrategy } from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  FormErrorText,\n  HelpItem,\n  SelectVariant,\n  TextAreaControl,\n  TextControl,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  FormGroup,\n  PageSection,\n  Radio,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { toUpperCase } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { useParams } from \"../../utils/useParams\";\nimport { toAuthorizationTab } from \"../routes/AuthenticationTab\";\nimport type { NewPermissionParams } from \"../routes/NewPermission\";\nimport {\n  PermissionDetailsParams,\n  toPermissionDetails,\n} from \"../routes/PermissionDetails\";\nimport { ResourcesPolicySelect } from \"./ResourcesPolicySelect\";\nimport { ScopeSelect } from \"./ScopeSelect\";\n\ntype FormFields = PolicyRepresentation & {\n  resourceType: string;\n};\n\nexport default function PermissionDetails() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const form = useForm<FormFields>({\n    mode: \"onChange\",\n  });\n  const {\n    control,\n    reset,\n    formState: { errors },\n    handleSubmit,\n  } = form;\n\n  const navigate = useNavigate();\n  const { id, realm, permissionType, permissionId, selectedId } = useParams<\n    NewPermissionParams & PermissionDetailsParams\n  >();\n\n  const { addAlert, addError } = useAlerts();\n  const [permission, setPermission] = useState<PolicyRepresentation>();\n  const [applyToResourceTypeFlag, setApplyToResourceTypeFlag] = useState(false);\n  const { hasAccess } = useAccess();\n\n  const isDisabled = !hasAccess(\"manage-authorization\");\n\n  useFetch(\n    async () => {\n      if (!permissionId) {\n        return {};\n      }\n      const [permission, resources, policies, scopes] = await Promise.all([\n        adminClient.clients.findOnePermission({\n          id,\n          type: permissionType,\n          permissionId,\n        }),\n        adminClient.clients.getAssociatedResources({\n          id,\n          permissionId,\n        }),\n        adminClient.clients.getAssociatedPolicies({\n          id,\n          permissionId,\n        }),\n        adminClient.clients.getAssociatedScopes({\n          id,\n          permissionId,\n        }),\n      ]);\n\n      if (!permission) {\n        throw new Error(t(\"notFound\"));\n      }\n\n      return {\n        permission,\n        resources: resources.map((r) => r._id),\n        policies: policies.map((p) => p.id!),\n        scopes: scopes.map((s) => s.id!),\n      };\n    },\n    ({ permission, resources, policies, scopes }) => {\n      reset({ ...permission, resources, policies, scopes });\n      if (permission && \"resourceType\" in permission) {\n        setApplyToResourceTypeFlag(\n          !!(permission as { resourceType: string }).resourceType,\n        );\n      }\n      setPermission({ ...permission, resources, policies });\n    },\n    [],\n  );\n\n  const save = async (permission: PolicyRepresentation) => {\n    try {\n      if (permissionId) {\n        await adminClient.clients.updatePermission(\n          { id, type: permissionType, permissionId },\n          permission,\n        );\n      } else {\n        const result = await adminClient.clients.createPermission(\n          { id, type: permissionType },\n          permission,\n        );\n        setPermission(result);\n        navigate(\n          toPermissionDetails({\n            realm,\n            id,\n            permissionType,\n            permissionId: result.id!,\n          }),\n        );\n      }\n      addAlert(\n        t((permissionId ? \"update\" : \"create\") + \"PermissionSuccess\"),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\"permissionSaveError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePermission\",\n    messageKey: t(\"deletePermissionConfirm\", {\n      permission: permission?.name,\n    }),\n    continueButtonVariant: ButtonVariant.danger,\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPermission({\n          id,\n          type: permissionType,\n          permissionId: permissionId,\n        });\n        addAlert(t(\"permissionDeletedSuccess\"), AlertVariant.success);\n        navigate(\n          toAuthorizationTab({ realm, clientId: id, tab: \"permissions\" }),\n        );\n      } catch (error) {\n        addError(\"permissionDeletedError\", error);\n      }\n    },\n  });\n\n  const resourcesIds = useWatch({\n    control,\n    name: \"resources\",\n    defaultValue: [],\n  });\n\n  if (!permission) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={\n          permissionId\n            ? permission.name!\n            : `create${toUpperCase(permissionType)}BasedPermission`\n        }\n        dropdownItems={\n          permissionId\n            ? [\n                <DropdownItem\n                  key=\"delete\"\n                  data-testid=\"delete-resource\"\n                  isDisabled={isDisabled}\n                  onClick={() => toggleDeleteDialog()}\n                >\n                  {t(\"delete\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-authorization\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormProvider {...form}>\n            <TextControl\n              name=\"name\"\n              label={t(\"name\")}\n              labelIcon={t(\"permissionName\")}\n              rules={{\n                required: t(\"required\"),\n              }}\n            />\n            <TextAreaControl\n              name=\"description\"\n              label={t(\"description\")}\n              labelIcon={t(\"permissionDescription\")}\n              rules={{\n                maxLength: {\n                  value: 255,\n                  message: t(\"maxLength\", { length: 255 }),\n                },\n              }}\n            />\n            <FormGroup\n              label={t(\"applyToResourceTypeFlag\")}\n              fieldId=\"applyToResourceTypeFlag\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"applyToResourceTypeFlagHelp\")}\n                  fieldLabelId=\"applyToResourceTypeFlag\"\n                />\n              }\n            >\n              <Switch\n                id=\"applyToResourceTypeFlag\"\n                name=\"applyToResourceTypeFlag\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={applyToResourceTypeFlag}\n                onChange={(_event, val) => setApplyToResourceTypeFlag(val)}\n                aria-label={t(\"applyToResourceTypeFlag\")}\n              />\n            </FormGroup>\n            {applyToResourceTypeFlag ? (\n              <TextControl\n                name=\"resourceType\"\n                label={t(\"resourceType\")}\n                labelIcon={t(\"resourceTypeHelp\")}\n                rules={{\n                  required: {\n                    value: permissionType === \"scope\" ? true : false,\n                    message: t(\"required\"),\n                  },\n                }}\n              />\n            ) : (\n              <FormGroup\n                label={t(\"resource\")}\n                fieldId=\"resources\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"permissionResources\")}\n                    fieldLabelId=\"resources\"\n                  />\n                }\n                isRequired={permissionType !== \"scope\"}\n              >\n                <ResourcesPolicySelect\n                  name=\"resources\"\n                  clientId={id}\n                  permissionId={permissionId}\n                  preSelected={\n                    permissionType === \"scope\" ? undefined : selectedId\n                  }\n                  variant={\n                    permissionType === \"scope\"\n                      ? SelectVariant.typeahead\n                      : SelectVariant.typeaheadMulti\n                  }\n                  isRequired={permissionType !== \"scope\"}\n                />\n                {errors.resources && <FormErrorText message={t(\"required\")} />}\n              </FormGroup>\n            )}\n            {permissionType === \"scope\" && (\n              <FormGroup\n                label={t(\"authorizationScopes\")}\n                fieldId=\"scopes\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"permissionScopesHelp\")}\n                    fieldLabelId=\"scopesSelect\"\n                  />\n                }\n                isRequired\n              >\n                <ScopeSelect\n                  clientId={id}\n                  resourceId={resourcesIds?.[0]}\n                  preSelected={selectedId}\n                />\n                {errors.scopes && <FormErrorText message={t(\"required\")} />}\n              </FormGroup>\n            )}\n            <FormGroup\n              label={t(\"policies\")}\n              fieldId=\"policies\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"permissionPoliciesHelp\")}\n                  fieldLabelId=\"policies\"\n                />\n              }\n            >\n              <ResourcesPolicySelect\n                name=\"policies\"\n                clientId={id}\n                permissionId={permissionId}\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"decisionStrategy\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"permissionDecisionStrategyHelp\")}\n                  fieldLabelId=\"decisionStrategy\"\n                />\n              }\n              fieldId=\"policyEnforcementMode\"\n              hasNoPaddingTop\n            >\n              <Controller\n                name=\"decisionStrategy\"\n                data-testid=\"decisionStrategy\"\n                defaultValue={DecisionStrategy.UNANIMOUS}\n                control={control}\n                render={({ field }) => (\n                  <>\n                    {Object.values(DecisionStrategy).map((strategy) => (\n                      <Radio\n                        id={strategy}\n                        key={strategy}\n                        data-testid={strategy}\n                        isChecked={field.value === strategy}\n                        isDisabled={isDisabled}\n                        name=\"decisionStrategies\"\n                        onChange={() => field.onChange(strategy)}\n                        label={t(`decisionStrategies.${strategy}`)}\n                        className=\"pf-v5-u-mb-md\"\n                      />\n                    ))}\n                  </>\n                )}\n              />\n            </FormGroup>\n            <ActionGroup>\n              <div className=\"pf-v5-u-mt-md\">\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  data-testid=\"save\"\n                >\n                  {t(\"save\")}\n                </Button>\n\n                <Button\n                  variant=\"link\"\n                  data-testid=\"cancel\"\n                  component={(props) => (\n                    <Link\n                      {...props}\n                      to={toAuthorizationTab({\n                        realm,\n                        clientId: id,\n                        tab: \"permissions\",\n                      })}\n                    ></Link>\n                  )}\n                >\n                  {t(\"cancel\")}\n                </Button>\n              </div>\n            </ActionGroup>\n          </FormProvider>\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["ScopeSelect","clientId","resourceId","preSelected","adminClient","useAdminClient","t","useTranslation","control","getValues","setValue","errors","useFormContext","scopes","setScopes","useState","selectedScopes","setSelectedScopes","search","setSearch","open","setOpen","firstUpdate","useRef","values","toSelectOptions","scope","jsx","SelectOption","useFetch","s","Controller","value","field","KeycloakSelect","SelectVariant","val","filter","selectedValue","option","changedValue","p","PermissionDetails","form","useForm","reset","handleSubmit","navigate","useNavigate","id","realm","permissionType","permissionId","selectedId","useParams","addAlert","addError","useAlerts","permission","setPermission","applyToResourceTypeFlag","setApplyToResourceTypeFlag","hasAccess","useAccess","isDisabled","resources","policies","r","save","result","toPermissionDetails","AlertVariant","error","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","toAuthorizationTab","resourcesIds","useWatch","jsxs","Fragment","ViewHeader","toUpperCase","DropdownItem","PageSection","FormAccess","FormProvider","TextControl","TextAreaControl","FormGroup","HelpItem","Switch","_event","ResourcesPolicySelect","FormErrorText","DecisionStrategy","strategy","Radio","ActionGroup","Button","props","Link","KeycloakSpinner"],"mappings":"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"}