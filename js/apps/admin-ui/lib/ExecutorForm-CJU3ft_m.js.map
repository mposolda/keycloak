{"version":3,"file":"ExecutorForm-CJU3ft_m.js","sources":["../src/realm-settings/ExecutorForm.tsx"],"sourcesContent":["import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\nimport type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport {\n  HelpItem,\n  KeycloakSelect,\n  SelectVariant,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  FormGroup,\n  PageSection,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { DynamicComponents } from \"../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { useParams } from \"../utils/useParams\";\nimport { ClientProfileParams, toClientProfile } from \"./routes/ClientProfile\";\nimport type { ExecutorParams } from \"./routes/Executor\";\n\ntype ExecutorForm = {\n  config?: object;\n  executor: string;\n};\n\nconst defaultValues: ExecutorForm = {\n  config: {},\n  executor: \"\",\n};\n\nexport default function ExecutorForm() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { realm, profileName } = useParams<ClientProfileParams>();\n  const { executorName } = useParams<ExecutorParams>();\n  const { addAlert, addError } = useAlerts();\n  const [selectExecutorTypeOpen, setSelectExecutorTypeOpen] = useState(false);\n  const serverInfo = useServerInfo();\n  const executorTypes =\n    serverInfo.componentTypes?.[\n      \"org.keycloak.services.clientpolicy.executor.ClientPolicyExecutorProvider\"\n    ];\n  const [executors, setExecutors] = useState<ComponentTypeRepresentation[]>([]);\n  const [executorProperties, setExecutorProperties] = useState<\n    ConfigPropertyRepresentation[]\n  >([]);\n  const [globalProfiles, setGlobalProfiles] = useState<\n    ClientProfileRepresentation[]\n  >([]);\n  const [profiles, setProfiles] = useState<ClientProfileRepresentation[]>([]);\n  const form = useForm({ defaultValues });\n  const { control, reset, handleSubmit } = form;\n  const editMode = !!executorName;\n\n  const setupForm = (profiles: ClientProfileRepresentation[]) => {\n    const profile = profiles.find((profile) => profile.name === profileName);\n    const executor = profile?.executors?.find(\n      (executor) => executor.executor === executorName,\n    );\n    if (executor) reset({ config: executor.configuration });\n  };\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({ includeGlobalProfiles: true }),\n    (profiles) => {\n      setGlobalProfiles(profiles.globalProfiles!);\n      setProfiles(profiles.profiles!);\n\n      setupForm(profiles.profiles!);\n      setupForm(profiles.globalProfiles!);\n    },\n    [],\n  );\n\n  const save = async () => {\n    const formValues = form.getValues();\n    const updatedProfiles = profiles.map((profile) => {\n      if (profile.name !== profileName) {\n        return profile;\n      }\n\n      const executors = (profile.executors ?? []).concat({\n        executor: formValues.executor,\n        configuration: formValues.config || {},\n      });\n\n      if (editMode) {\n        const profileExecutor = profile.executors!.find(\n          (executor) => executor.executor === executorName,\n        );\n        profileExecutor!.configuration = {\n          ...profileExecutor!.configuration,\n          ...formValues.config,\n        };\n      }\n\n      if (editMode) {\n        return profile;\n      }\n      return {\n        ...profile,\n        executors,\n      };\n    });\n    try {\n      await adminClient.clientPolicies.createProfiles({\n        profiles: updatedProfiles,\n        globalProfiles: globalProfiles,\n      });\n      addAlert(\n        editMode ? t(\"updateExecutorSuccess\") : t(\"addExecutorSuccess\"),\n        AlertVariant.success,\n      );\n\n      navigate(toClientProfile({ realm, profileName }));\n    } catch (error) {\n      addError(editMode ? \"updateExecutorError\" : \"addExecutorError\", error);\n    }\n  };\n\n  const globalProfile = globalProfiles.find(\n    (globalProfile) => globalProfile.name === profileName,\n  );\n\n  const profileExecutorType = executorTypes?.find(\n    (executor) => executor.id === executorName,\n  );\n\n  const editedProfileExecutors =\n    profileExecutorType?.properties.map<ConfigPropertyRepresentation>(\n      (property) => {\n        const globalDefaultValues = editMode ? property.defaultValue : \"\";\n        return {\n          ...property,\n          defaultValue: globalDefaultValues,\n        };\n      },\n    );\n\n  return (\n    <>\n      <ViewHeader\n        titleKey={editMode ? executorName : t(\"addExecutor\")}\n        divider\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-v5-u-mt-lg\"\n          isReadOnly={!!globalProfile}\n        >\n          <FormGroup\n            label={t(\"executorType\")}\n            fieldId=\"kc-executorType\"\n            labelIcon={\n              executors.length > 0 && executors[0].helpText! !== \"\" ? (\n                <HelpItem\n                  helpText={executors[0].helpText}\n                  fieldLabelId=\"executorTypeHelpText\"\n                />\n              ) : editMode ? (\n                <HelpItem\n                  helpText={profileExecutorType?.helpText}\n                  fieldLabelId=\"executorTypeHelpText\"\n                />\n              ) : undefined\n            }\n          >\n            <Controller\n              name=\"executor\"\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <KeycloakSelect\n                  toggleId=\"kc-executor\"\n                  placeholderText=\"Select an executor\"\n                  onToggle={(isOpen) => setSelectExecutorTypeOpen(isOpen)}\n                  onSelect={(value) => {\n                    reset({ ...defaultValues, executor: value.toString() });\n                    const selectedExecutor = executorTypes?.filter(\n                      (type) => type.id === value,\n                    );\n                    setExecutors(selectedExecutor ?? []);\n                    setExecutorProperties(\n                      selectedExecutor?.[0].properties ?? [],\n                    );\n                    setSelectExecutorTypeOpen(false);\n                  }}\n                  selections={editMode ? executorName : field.value}\n                  variant={SelectVariant.single}\n                  data-testid=\"executorType-select\"\n                  aria-label={t(\"executorType\")}\n                  isOpen={selectExecutorTypeOpen}\n                  maxHeight={580}\n                  isDisabled={editMode}\n                >\n                  {executorTypes?.map((option) => (\n                    <SelectOption\n                      selected={option.id === field.value}\n                      key={option.id}\n                      value={option.id}\n                      description={option.helpText}\n                    >\n                      {option.id}\n                    </SelectOption>\n                  ))}\n                </KeycloakSelect>\n              )}\n            />\n          </FormGroup>\n          <FormProvider {...form}>\n            <DynamicComponents\n              properties={\n                editMode ? editedProfileExecutors! : executorProperties\n              }\n            />\n          </FormProvider>\n          {!globalProfile && (\n            <ActionGroup>\n              <Button\n                variant=\"primary\"\n                onClick={() => handleSubmit(save)()}\n                data-testid=\"addExecutor-saveBtn\"\n              >\n                {editMode ? t(\"save\") : t(\"add\")}\n              </Button>\n              <Button\n                variant=\"link\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toClientProfile({ realm, profileName })}\n                  />\n                )}\n                data-testid=\"addExecutor-cancelBtn\"\n              >\n                {t(\"cancel\")}\n              </Button>\n            </ActionGroup>\n          )}\n        </FormAccess>\n        {editMode && globalProfile && (\n          <div className=\"kc-backToProfile\">\n            <Button\n              component={(props) => (\n                <Link {...props} to={toClientProfile({ realm, profileName })} />\n              )}\n              variant=\"primary\"\n            >\n              {t(\"back\")}\n            </Button>\n          </div>\n        )}\n      </PageSection>\n    </>\n  );\n}\n"],"names":["defaultValues","ExecutorForm","adminClient","useAdminClient","t","useTranslation","navigate","useNavigate","realm","profileName","useParams","executorName","addAlert","addError","useAlerts","selectExecutorTypeOpen","setSelectExecutorTypeOpen","useState","executorTypes","useServerInfo","executors","setExecutors","executorProperties","setExecutorProperties","globalProfiles","setGlobalProfiles","profiles","setProfiles","form","useForm","control","reset","handleSubmit","editMode","setupForm","executor","profile","useFetch","save","formValues","updatedProfiles","profileExecutor","AlertVariant","toClientProfile","error","globalProfile","profileExecutorType","editedProfileExecutors","property","globalDefaultValues","jsxs","Fragment","jsx","ViewHeader","PageSection","FormAccess","FormGroup","HelpItem","Controller","field","KeycloakSelect","isOpen","value","selectedExecutor","type","SelectVariant","option","SelectOption","FormProvider","DynamicComponents","ActionGroup","Button","props","Link"],"mappings":"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"}