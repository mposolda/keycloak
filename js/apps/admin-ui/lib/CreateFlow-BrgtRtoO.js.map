{"version":3,"file":"CreateFlow-BrgtRtoO.js","sources":["../src/authentication/form/CreateFlow.tsx"],"sourcesContent":["import type AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { FormSubmitButton, SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toAuthentication } from \"../routes/Authentication\";\nimport { toFlow } from \"../routes/Flow\";\nimport { NameDescription } from \"./NameDescription\";\n\nconst TYPES = [\"basic-flow\", \"client-flow\"] as const;\n\nexport default function CreateFlow() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const { addAlert } = useAlerts();\n  const form = useForm<AuthenticationFlowRepresentation>();\n  const { handleSubmit, formState } = form;\n\n  const onSubmit = async (formValues: AuthenticationFlowRepresentation) => {\n    const flow = { ...formValues, builtIn: false, topLevel: true };\n\n    try {\n      const { id } =\n        await adminClient.authenticationManagement.createFlow(flow);\n      addAlert(t(\"flowCreatedSuccess\"), AlertVariant.success);\n      navigate(\n        toFlow({\n          realm,\n          id: id!,\n          usedBy: \"notInUse\",\n        }),\n      );\n    } catch (error: any) {\n      addAlert(\n        t(\"flowCreateError\", {\n          error: error.response?.data?.errorMessage || error,\n        }),\n        AlertVariant.danger,\n      );\n    }\n  };\n\n  return (\n    <>\n      <ViewHeader titleKey=\"createFlow\" subKey=\"authenticationCreateFlowHelp\" />\n      <PageSection variant=\"light\">\n        <FormProvider {...form}>\n          <FormAccess\n            isHorizontal\n            role=\"manage-authorization\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <NameDescription />\n            <SelectControl\n              name=\"providerId\"\n              label={t(\"flowType\")}\n              labelIcon={t(\"topLevelFlowTypeHelp\")}\n              aria-label={t(\"selectFlowType\")}\n              controller={{ defaultValue: TYPES[0] }}\n              options={TYPES.map((type) => ({\n                key: type,\n                value: t(`top-level-flow-type.${type}`),\n              }))}\n            />\n            <ActionGroup>\n              <FormSubmitButton\n                formState={formState}\n                data-testid=\"create\"\n                allowInvalid\n                allowNonDirty\n              >\n                {t(\"create\")}\n              </FormSubmitButton>\n              <Button\n                data-testid=\"cancel\"\n                variant=\"link\"\n                component={(props) => (\n                  <Link {...props} to={toAuthentication({ realm })}></Link>\n                )}\n              >\n                {t(\"cancel\")}\n              </Button>\n            </ActionGroup>\n          </FormAccess>\n        </FormProvider>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["TYPES","CreateFlow","adminClient","useAdminClient","t","useTranslation","navigate","useNavigate","realm","useRealm","addAlert","useAlerts","form","useForm","handleSubmit","formState","jsxs","Fragment","jsx","ViewHeader","PageSection","FormProvider","FormAccess","formValues","flow","id","AlertVariant","toFlow","error","NameDescription","SelectControl","type","ActionGroup","FormSubmitButton","Button","props","Link","toAuthentication"],"mappings":";;;;AAoBA,MAAMA,IAAQ,CAAC,cAAc,aAAa;AAE1C,SAAwBC,IAAa;AAC7B,QAAA,EAAE,aAAAC,MAAgBC,KAElB,EAAE,GAAAC,MAAMC,KACRC,IAAWC,KACX,EAAE,OAAAC,MAAUC,KACZ,EAAE,UAAAC,MAAaC,KACfC,IAAOC,KACP,EAAE,cAAAC,GAAc,WAAAC,EAAc,IAAAH;AA0BpC,SAEI,gBAAAI,EAAAC,GAAA,EAAA,UAAA;AAAA,IAAA,gBAAAC,EAACC,GAAW,EAAA,UAAS,cAAa,QAAO,gCAA+B;AAAA,sBACvEC,GAAY,EAAA,SAAQ,SACnB,UAAC,gBAAAF,EAAAG,GAAA,EAAc,GAAGT,GAChB,UAAA,gBAAAI;AAAA,MAACM;AAAA,MAAA;AAAA,QACC,cAAY;AAAA,QACZ,MAAK;AAAA,QACL,UAAUR,EAhCH,OAAOS,MAAiD;AACvE,gBAAMC,IAAO,EAAE,GAAGD,GAAY,SAAS,IAAO,UAAU;AAEpD,cAAA;AACF,kBAAM,EAAE,IAAAE,EAAG,IACT,MAAMvB,EAAY,yBAAyB,WAAWsB,CAAI;AAC5D,YAAAd,EAASN,EAAE,oBAAoB,GAAGsB,EAAa,OAAO,GACtDpB;AAAA,cACEqB,EAAO;AAAA,gBACL,OAAAnB;AAAA,gBACA,IAAAiB;AAAA,gBACA,QAAQ;AAAA,cAAA,CACT;AAAA,YAAA;AAAA,mBAEIG,GAAY;AACnB,YAAAlB;AAAA,cACEN,EAAE,mBAAmB;AAAA,gBACnB,OAAOwB,EAAM,UAAU,MAAM,gBAAgBA;AAAA,cAAA,CAC9C;AAAA,cACDF,EAAa;AAAA,YAAA;AAAA,UAEjB;AAAA,QAAA,CAWuC;AAAA,QAE/B,UAAA;AAAA,UAAA,gBAAAR,EAACW,GAAgB,EAAA;AAAA,UACjB,gBAAAX;AAAA,YAACY;AAAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,OAAO1B,EAAE,UAAU;AAAA,cACnB,WAAWA,EAAE,sBAAsB;AAAA,cACnC,cAAYA,EAAE,gBAAgB;AAAA,cAC9B,YAAY,EAAE,cAAcJ,EAAM,CAAC,EAAE;AAAA,cACrC,SAASA,EAAM,IAAI,CAAC+B,OAAU;AAAA,gBAC5B,KAAKA;AAAA,gBACL,OAAO3B,EAAE,uBAAuB2B,CAAI,EAAE;AAAA,cAAA,EACtC;AAAA,YAAA;AAAA,UACJ;AAAA,4BACCC,GACC,EAAA,UAAA;AAAA,YAAA,gBAAAd;AAAA,cAACe;AAAAA,cAAA;AAAA,gBACC,WAAAlB;AAAA,gBACA,eAAY;AAAA,gBACZ,cAAY;AAAA,gBACZ,eAAa;AAAA,gBAEZ,YAAE,QAAQ;AAAA,cAAA;AAAA,YACb;AAAA,YACA,gBAAAG;AAAA,cAACgB;AAAA,cAAA;AAAA,gBACC,eAAY;AAAA,gBACZ,SAAQ;AAAA,gBACR,WAAW,CAACC,MACV,gBAAAjB,EAACkB,GAAM,EAAA,GAAGD,GAAO,IAAIE,EAAiB,EAAE,OAAA7B,EAAM,CAAC,EAAG,CAAA;AAAA,gBAGnD,YAAE,QAAQ;AAAA,cAAA;AAAA,YACb;AAAA,UAAA,GACF;AAAA,QAAA;AAAA,MAAA;AAAA,OAEJ,EACF,CAAA;AAAA,EACF,EAAA,CAAA;AAEJ;"}